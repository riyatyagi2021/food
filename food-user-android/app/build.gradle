import java.util.regex.Matcher
import java.util.regex.Pattern

apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 26
        targetSdkVersion 30
        multiDexEnabled true
    }

    flavorDimensions "mob_kitchen"
    def appName = 'mob_kitchen'

    signingConfigs {
        config {
            storeFile file('mob_kitchen.jks')
            storePassword "mobcoder@123"
            keyAlias "key0"
            keyPassword "mobcoder@123"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //debuggable true
            signingConfig signingConfigs.config
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def name = appName + "_" + getCurrentFlavor() + "_" + variant.mergedFlavor.versionName + "_" +
                            variant.mergedFlavor.versionCode + "_" +
                            getDate() + ".apk";
                    output.outputFileName = name
                }
            }
        }
        debug {
            debuggable true
        }
    }


    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }


    productFlavors {

        devUser {
            buildConfigField "String", "FILE_PROVIDER", '"com.mobcoder.kitchen.provider"'
            applicationId 'com.mobcoder.kitchen'
            buildConfigField "String", "BASE_URL", '"https://devhrmapi.mobcoder.com/hrm/api/"'
            manifestPlaceholders = [
                    appName: "Mob's Kitchen Dev",
                    appIcon: '@mipmap/ic_launcher_kitchen'
            ]
            versionCode 1
            versionName '1.0'
            buildConfigField "int", "APP_STORE", '2'
            buildConfigField "String", "BASE_AUTH", '"Basic aHJtX2FkbWluOmFkbWluQGhybQ=="'
        }

        prodUser {
            buildConfigField "String", "FILE_PROVIDER", '"com.mobcoder.kitchen.provider"'
            applicationId 'com.mobcoder.kitchen'
            buildConfigField "String", "BASE_URL", '"https://hrmapi.mobcoder.com/hrm/api/"'
            manifestPlaceholders = [
                    appName: "Mob's Kitchen Prod",
                    appIcon: '@mipmap/ic_launcher_kitchen'
            ]
            versionCode 2
            versionName '1.1'
            buildConfigField "int", "APP_STORE", '2'
            buildConfigField "String", "BASE_AUTH", '"Basic aHJtX2FkbWluOmFkbWluQGhybQ=="'
        }


        playUser {
            buildConfigField "String", "FILE_PROVIDER", '"com.mobcoder.kitchen.provider"'
            applicationId 'com.mobcoder.kitchen'
            buildConfigField "String", "BASE_URL", '"https://hrmapi.mobcoder.com/hrm/api/"'
            manifestPlaceholders = [
                    appName: "Mob's Kitchen",
                    appIcon: '@mipmap/ic_launcher_kitchen'
            ]
            versionCode 2
            versionName '1.1'
            buildConfigField "int", "APP_STORE", '3'
            buildConfigField "String", "BASE_AUTH", '"Basic aHJtX2FkbWluOmFkbWluQGhybQ=="'
        }

    }


    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // for kotlin
    //noinspection GradleDependency
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.5.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.3.1"
    implementation 'com.google.android.play:core-ktx:1.8.1'
    //noinspection LifecycleAnnotationProcessorWithJava8
    kapt 'androidx.lifecycle:lifecycle-compiler:2.3.1'
    implementation "androidx.activity:activity-ktx:1.2.3"
    implementation "androidx.fragment:fragment-ktx:1.3.5"

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    implementation "com.google.android.material:material:1.4.0-rc01"
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.cardview:cardview:1.0.0'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:2.9.0"
    implementation "com.squareup.retrofit2:converter-gson:2.9.0"
    implementation "com.squareup.okhttp3:logging-interceptor:4.4.0"
    implementation "com.squareup.okhttp3:okhttp:4.8.0"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:2.2.0"

    // Glide
    implementation "com.github.bumptech.glide:glide:4.11.0"
    annotationProcessor "com.github.bumptech.glide:compiler:4.11.0"

    // All dimens
    implementation 'com.intuit.sdp:sdp-android:1.0.6'

    // run time permission
    implementation 'com.karumi:dexter:6.2.2'

    //Firebase messaging notification
    implementation 'com.google.firebase:firebase-messaging:22.0.0'
    implementation 'com.google.firebase:firebase-core:19.0.0'

    // Recommended: Add the Firebase SDK for Google Analytics.
    implementation 'com.google.firebase:firebase-analytics:19.0.0'

    // Add the Firebase Crashlytics SDK.
    implementation 'com.google.firebase:firebase-crashlytics:18.1.0'

    implementation 'org.jsoup:jsoup:1.11.2'
}


def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    Pattern pattern;
    pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    Matcher matcher = pattern.matcher(tskReqStr)
    if (matcher.find())
        return matcher.group(1).toLowerCase()
    else {
        println "NO MATCH FOUND"
        return "";
    }
}

static def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

